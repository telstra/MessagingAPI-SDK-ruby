=begin
#Telstra Messaging API

#The Telstra Messaging API specification

The version of the OpenAPI document: 2.2.9

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Telstra_Messaging::MessagingApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'MessagingApi' do
  before do
    # run before each test
    @api_instance = Telstra_Messaging::MessagingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MessagingApi' do
    it 'should create an instance of MessagingApi' do
      expect(@api_instance).to be_instance_of(Telstra_Messaging::MessagingApi)
    end
  end

  # unit tests for get_mms_status
  # Get MMS Status
  # Get MMS Status
  # @param messageid Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/mms 
  # @param [Hash] opts the optional parameters
  # @return [Array<OutboundPollResponse>]
  describe 'get_mms_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sms_status
  # Get SMS Status
  # If no notification URL has been specified, it is possible to poll for the message status.  Note that the &#x60;MessageId&#x60; that appears in the URL must be URL encoded. Just copying the &#x60;MessageId&#x60; as it was supplied when submitting the message may not work.  # SMS Status with Notification URL  When a message has reached its final state, the API will send a POST to the URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{     \&quot;to\&quot;: \&quot;+61418123456\&quot;,     \&quot;sentTimestamp\&quot;: \&quot;2017-03-17T10:05:22+10:00\&quot;,     \&quot;receivedTimestamp\&quot;: \&quot;2017-03-17T10:05:23+10:00\&quot;,     \&quot;messageId\&quot;: \&quot;1234567890ABCDEFGHIJKLNOPQRSTUVW\&quot;,     \&quot;deliveryStatus\&quot;: \&quot;DELIVRD\&quot;   } &lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | --- | ---| | &#x60;to&#x60; |  The number the message was sent to. | | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;deliveryStatus&#x60; | The final state of the message. | | &#x60;messageId&#x60; | The same reference that was returned when the original message was sent.| | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API.|  Upon receiving this call it is expected that your servers will give a 204 (No Content) response. 
  # @param message_id Unique identifier of a message - it is the value returned from a previous POST call to https://tapi.telstra.com/v2/messages/sms. 
  # @param [Hash] opts the optional parameters
  # @return [Array<OutboundPollResponse>]
  describe 'get_sms_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for m_ms_health_check
  # MMS Health Check
  # Determine whether the MMS service is up or down. 
  # @param [Hash] opts the optional parameters
  # @return [HealthCheckResponse]
  describe 'm_ms_health_check test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for retrieve_mms_replies
  # Retrieve MMS Replies
  # Messages are retrieved one at a time, starting with the earliest reply.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead, i.e. &#x60;GET&#x60; and reply &#x60;notifyURL&#x60; are exclusive.  # MMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;: \&quot;+61418123456\&quot;,   \&quot;from\&quot;: \&quot;+61421987654\&quot;,   \&quot;sentTimestamp\&quot;: \&quot;2018-03-23T12:15:45+10:00\&quot;,   \&quot;messageId\&quot;: \&quot;XFRO1ApiA0000000111\&quot;,   \&quot;subject\&quot;: \&quot;Foo\&quot;,   \&quot;envelope\&quot;: \&quot;string\&quot;,   \&quot;MMSContent\&quot;:     [       {         \&quot;type\&quot;: \&quot;text/plain\&quot;,         \&quot;filename\&quot;: \&quot;text_1.txt\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       },       {         \&quot;type\&quot;: \&quot;image/jpeg\&quot;,         \&quot;filename\&quot;: \&quot;sample.jpeg\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       }     ] }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | --- | --- | | &#x60;to&#x60; |The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | Message Id assigned by the MMSC | | &#x60;subject&#x60; | The subject assigned to the message. | | &#x60;envelope&#x60; | Information about about terminal type and originating operator. | | &#x60;MMSContent&#x60; | An array of the actual content of the reply message. | | &#x60;type&#x60; | The content type of the message. | | &#x60;filename&#x60; | The filename for the message content. | | &#x60;payload&#x60; | The content of the message. | 
  # @param [Hash] opts the optional parameters
  # @return [GetMmsResponse]
  describe 'retrieve_mms_replies test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for retrieve_sms_replies
  # Retrieve SMS Replies
  # Messages are retrieved one at a time, starting with the earliest reply.  The API supports the encoding of emojis in the reply message. The emojis will be in their UTF-8 format.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead.  # SMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;:\&quot;+61472880123\&quot;,   \&quot;from\&quot;:\&quot;+61412345678\&quot;,   \&quot;body\&quot;:\&quot;Foo4\&quot;,   \&quot;sentTimestamp\&quot;:\&quot;2018-04-20T14:24:35\&quot;,   \&quot;messageId\&quot;:\&quot;DMASApiA0000000146\&quot; }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | --- |--- | | &#x60;to&#x60; | The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;body&#x60; | The content of the SMS response. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | The ID assigned to the message. | 
  # @param [Hash] opts the optional parameters
  # @return [InboundPollResponse]
  describe 'retrieve_sms_replies test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for s_ms_health_check
  # SMS Health Check
  # Determine whether the SMS service is up or down. 
  # @param [Hash] opts the optional parameters
  # @return [HealthCheckResponse]
  describe 's_ms_health_check test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for s_ms_multi
  # Send Multiple SMS
  # Send multiple SMS in one API call. 
  # @param payload A JSON payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. 
  # @param [Hash] opts the optional parameters
  # @return [MessageSentResponseSms]
  describe 's_ms_multi test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_mms
  # Send MMS
  # Send MMS
  # @param body A JSON or XML payload containing the recipient&#39;s phone number and MMS message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit. 
  # @param [Hash] opts the optional parameters
  # @return [MessageSentResponseMms]
  describe 'send_mms test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_sms
  # Send SMS
  # Send an SMS Message to a single or multiple mobile number/s. 
  # @param payload A JSON or XML payload containing the recipient&#39;s phone number and text message. This number can be in international format if preceeded by a &#39;+&#39; or in national format (&#39;04xxxxxxxx&#39;) where x is a digit. 
  # @param [Hash] opts the optional parameters
  # @return [MessageSentResponseSms]
  describe 'send_sms test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
