=begin
#Telstra Messaging API

# The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages. 

OpenAPI spec version: 2.2.4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module Telstra_Messaging
  class ProvisioningApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Subscription
    # Provision a mobile number
    # @param authorization An OAUTH bearer token that is entitled to use the &#39;SUBSCRIPTION&#39; scope.
    # @param body A JSON payload containing the required attributes
    # @param [Hash] opts the optional parameters
    # @return [ProvisionNumberResponse]
    def create_subscription(authorization, body, opts = {})
      data, _status_code, _headers = create_subscription_with_http_info(authorization, body, opts)
      return data
    end

    # Create Subscription
    # Provision a mobile number
    # @param authorization An OAUTH bearer token that is entitled to use the &#39;SUBSCRIPTION&#39; scope.
    # @param body A JSON payload containing the required attributes
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProvisionNumberResponse, Fixnum, Hash)>] ProvisionNumberResponse data, response status code and response headers
    def create_subscription_with_http_info(authorization, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProvisioningApi.create_subscription ..."
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ProvisioningApi.create_subscription"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProvisioningApi.create_subscription"
      end
      # resource path
      local_var_path = "/messages/provisioning/subscriptions"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProvisionNumberResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProvisioningApi#create_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Subscription
    # Delete a mobile number subscription from an account
    # @param authorization An OAUTH bearer token that is entitled to use the &#39;SUBSCRIPTION&#39; scope.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_subscription(authorization, opts = {})
      delete_subscription_with_http_info(authorization, opts)
      return nil
    end

    # Delete Subscription
    # Delete a mobile number subscription from an account
    # @param authorization An OAUTH bearer token that is entitled to use the &#39;SUBSCRIPTION&#39; scope.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_subscription_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProvisioningApi.delete_subscription ..."
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ProvisioningApi.delete_subscription"
      end
      # resource path
      local_var_path = "/messages/provisioning/subscriptions"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProvisioningApi#delete_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Subscription
    # Get mobile number subscription for an account
    # @param authorization An OAUTH bearer token that is entitled to use the &#39;SUBSCRIPTION&#39; scope.
    # @param [Hash] opts the optional parameters
    # @return [Array<ProvisionNumberResponse>]
    def get_subscription(authorization, opts = {})
      data, _status_code, _headers = get_subscription_with_http_info(authorization, opts)
      return data
    end

    # Get Subscription
    # Get mobile number subscription for an account
    # @param authorization An OAUTH bearer token that is entitled to use the &#39;SUBSCRIPTION&#39; scope.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ProvisionNumberResponse>, Fixnum, Hash)>] Array<ProvisionNumberResponse> data, response status code and response headers
    def get_subscription_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProvisioningApi.get_subscription ..."
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ProvisioningApi.get_subscription"
      end
      # resource path
      local_var_path = "/messages/provisioning/subscriptions"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ProvisionNumberResponse>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProvisioningApi#get_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
