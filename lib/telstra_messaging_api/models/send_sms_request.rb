# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module TelstraMessagingApi
  # SendSMSRequest Model.
  class SendSMSRequest < BaseModel
    # Phone number (in E.164 format) to send the SMS to. This number
    # can be in international format if preceeded by a ‘+’, or in national
    # format.
    # @return [String]
    attr_accessor :to

    # The text body of the message. Messages longer than 160 characters
    # will be counted as multiple messages.
    # @return [String]
    attr_accessor :body

    # Phone number (in E.164 format) the SMS was sent from. If not
    # present, the serverice will use the mobile number associated with the
    # application,
    # or it be an Alphanumeric address of up to 11 characters.
    # @return [String]
    attr_accessor :from

    # How long the platform should attempt to deliver the message for.
    # This period is specified in minutes from the message
    # @return [Integer]
    attr_accessor :validity

    # How long the platform should wait before attempting to send the
    # message - specified in minutes.
    # @return [Integer]
    attr_accessor :scheduled_delivery

    # Contains a URL that will be called once your message has been
    # processed. The status may be delivered, expired, deleted, etc.
    # @return [String]
    attr_accessor :notify_url

    # If set to true, the reply message functionality will be implemented
    # and the to address will be ignored if present. If false or not present,
    # then normal message handling is implemented.
    # @return [Boolean]
    attr_accessor :reply_request

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['to'] = 'to'
      @_hash['body'] = 'body'
      @_hash['from'] = 'from'
      @_hash['validity'] = 'validity'
      @_hash['scheduled_delivery'] = 'scheduledDelivery'
      @_hash['notify_url'] = 'notifyURL'
      @_hash['reply_request'] = 'replyRequest'
      @_hash
    end

    def initialize(to = nil,
                   body = nil,
                   from = nil,
                   validity = nil,
                   scheduled_delivery = nil,
                   notify_url = nil,
                   reply_request = nil)
      @to = to
      @body = body
      @from = from
      @validity = validity
      @scheduled_delivery = scheduled_delivery
      @notify_url = notify_url
      @reply_request = reply_request
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      to = hash['to']
      body = hash['body']
      from = hash['from']
      validity = hash['validity']
      scheduled_delivery = hash['scheduledDelivery']
      notify_url = hash['notifyURL']
      reply_request = hash['replyRequest']

      # Create object from extracted values.
      SendSMSRequest.new(to,
                         body,
                         from,
                         validity,
                         scheduled_delivery,
                         notify_url,
                         reply_request)
    end
  end
end
