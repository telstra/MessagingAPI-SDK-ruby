# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module TelstraMessagingApi
  # MessagingController
  class MessagingController < BaseController
    @instance = MessagingController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Retrieve SMS Responses
    # @return InboundPollResponse response from the API call
    def retrieve_sms_responses
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/messages/sms'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorErrorErrorErrorErrorException.new(
          'Invalid or missing request parameters',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorErrorErrorErrorErrorException.new(
          'Invalid or no credentials passed in the request',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorErrorErrorErrorErrorException.new(
          'Authorization credentials passed and accepted but account does' \
          ' not have permission',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorErrorErrorErrorErrorException.new(
          'The requested URI does not exist',
          _context
        )
      elsif _context.response.status_code == 405
        raise ErrorErrorErrorErrorErrorException.new(
          'The requested resource does not support the supplied verb',
          _context
        )
      elsif _context.response.status_code == 415
        raise ErrorErrorErrorErrorErrorException.new(
          'API does not support the requested content type',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorErrorErrorErrorErrorException.new(
          'The request is formed correctly, but due to some condition the' \
          ' request cannot be processed e.g. email is required and' \
          ' it is not provided in the request',
          _context
        )
      elsif _context.response.status_code == 501
        raise ErrorErrorErrorErrorErrorException.new(
          'The HTTP method being used has not yet been implemented for the' \
          ' requested resource',
          _context
        )
      elsif _context.response.status_code == 503
        raise ErrorErrorErrorErrorErrorException.new(
          'The service requested is currently unavailable',
          _context
        )
      end
      unless _context.response.status_code.between?(200, 208)
        raise ErrorErrorErrorErrorErrorException.new(
          'An internal error occurred when processing the request',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      InboundPollResponse.from_hash(decoded)
    end

    # Send SMS
    # @param [SendSMSRequest] payload Required parameter: A JSON or XML payload
    # containing the recipient's phone number and text message.  The recipient
    # number should be in the format '04xxxxxxxx' where x is a digit
    # @return MessageSentResponse response from the API call
    def create_send_sms(payload)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/messages/sms'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: payload.to_json
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorErrorErrorErrorErrorException.new(
          'Invalid or missing request parameters',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorErrorErrorErrorErrorException.new(
          'Invalid or no credentials passed in the request',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorErrorErrorErrorErrorException.new(
          'Authorization credentials passed and accepted but account does' \
          ' not have permission',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorErrorErrorErrorErrorException.new(
          'The requested URI does not exist',
          _context
        )
      elsif _context.response.status_code == 405
        raise ErrorErrorErrorErrorErrorException.new(
          'The requested resource does not support the supplied verb',
          _context
        )
      elsif _context.response.status_code == 415
        raise ErrorErrorErrorErrorErrorException.new(
          'API does not support the requested content type',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorErrorErrorErrorErrorException.new(
          'The request is formed correctly, but due to some condition the' \
          ' request cannot be processed e.g. email is required and' \
          ' it is not provided in the request',
          _context
        )
      elsif _context.response.status_code == 501
        raise ErrorErrorErrorErrorErrorException.new(
          'The HTTP method being used has not yet been implemented for the' \
          ' requested resource',
          _context
        )
      elsif _context.response.status_code == 503
        raise ErrorErrorErrorErrorErrorException.new(
          'The service requested is currently unavailable',
          _context
        )
      end
      unless _context.response.status_code.between?(200, 208)
        raise ErrorErrorErrorErrorErrorException.new(
          'An internal error occurred when processing the request',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      MessageSentResponse.from_hash(decoded)
    end

    # Get SMS Status
    # @param [String] message_id Required parameter: Unique identifier of a
    # message - it is the value returned from a previous POST call to
    # https://api.telstra.com/v2/messages/sms
    # @return List of OutboundPollResponse response from the API call
    def get_sms_status(message_id)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/messages/sms/{messageId}/status'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'messageId' => message_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorErrorErrorErrorErrorException.new(
          'Invalid or missing request parameters',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorErrorErrorErrorErrorException.new(
          'Invalid or no credentials passed in the request',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorErrorErrorErrorErrorException.new(
          'Authorization credentials passed and accepted but account does' \
          ' not have permission',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorErrorErrorErrorErrorException.new(
          'The requested URI does not exist',
          _context
        )
      elsif _context.response.status_code == 405
        raise ErrorErrorErrorErrorErrorException.new(
          'The requested resource does not support the supplied verb',
          _context
        )
      elsif _context.response.status_code == 415
        raise ErrorErrorErrorErrorErrorException.new(
          'API does not support the requested content type',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorErrorErrorErrorErrorException.new(
          'The request is formed correctly, but due to some condition the' \
          ' request cannot be processed e.g. email is required and' \
          ' it is not provided in the request',
          _context
        )
      elsif _context.response.status_code == 501
        raise ErrorErrorErrorErrorErrorException.new(
          'The HTTP method being used has not yet been implemented for the' \
          ' requested resource',
          _context
        )
      elsif _context.response.status_code == 503
        raise ErrorErrorErrorErrorErrorException.new(
          'The service requested is currently unavailable',
          _context
        )
      end
      unless _context.response.status_code.between?(200, 208)
        raise ErrorErrorErrorErrorErrorException.new(
          'An internal error occurred when processing the request',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      decoded.map { |element| OutboundPollResponse.from_hash(element) }
    end

    # Send MMS
    # @param [SendMMSRequest] body Required parameter: A JSON or XML payload
    # containing the recipient's phone number and MMS message.The recipient
    # number should be in the format '04xxxxxxxx' where x is a digit
    # @return Mixed response from the API call
    def create_send_mms(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/messages/mms'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise APIException.new(
          'Invalid or missing request parameters',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorErrorErrorErrorErrorException.new(
          'Invalid or no credentials passed in the request',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorErrorErrorErrorErrorException.new(
          'Authorization credentials passed and accepted but account does' \
          ' not have permission',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorErrorErrorErrorErrorException.new(
          'The requested URI does not exist',
          _context
        )
      elsif _context.response.status_code == 405
        raise ErrorErrorErrorErrorErrorException.new(
          'The requested resource does not support the supplied verb',
          _context
        )
      elsif _context.response.status_code == 415
        raise ErrorErrorErrorErrorErrorException.new(
          'API does not support the requested content type',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorErrorErrorErrorErrorException.new(
          'The request is formed correctly, but due to some condition the' \
          ' request cannot be processed e.g. email is required and' \
          ' it is not provided in the request',
          _context
        )
      elsif _context.response.status_code == 501
        raise ErrorErrorErrorErrorErrorException.new(
          'The HTTP method being used has not yet been implemented for the' \
          ' requested resource',
          _context
        )
      elsif _context.response.status_code == 503
        raise ErrorErrorErrorErrorErrorException.new(
          'The service requested is currently unavailable',
          _context
        )
      end
      unless _context.response.status_code.between?(200, 208)
        raise ErrorErrorErrorErrorErrorException.new(
          'An internal error occurred when processing the request',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Get MMS Status
    # @param [String] messageid Required parameter: Unique identifier of a
    # message - it is the value returned from a previous POST call to
    # https://api.telstra.com/v2/messages/mms
    # @return List of OutboundPollResponse response from the API call
    def get_mms_status(messageid)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/messages/mms/{messageid}/status'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'messageid' => messageid
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorErrorErrorErrorErrorException.new(
          'Invalid or missing request parameters',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorErrorErrorErrorErrorException.new(
          'Invalid or no credentials passed in the request',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorErrorErrorErrorErrorException.new(
          'Authorization credentials passed and accepted but account does' \
          ' not have permission',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorErrorErrorErrorErrorException.new(
          'The requested URI does not exist',
          _context
        )
      elsif _context.response.status_code == 405
        raise ErrorErrorErrorErrorErrorException.new(
          'The requested resource does not support the supplied verb',
          _context
        )
      elsif _context.response.status_code == 415
        raise ErrorErrorErrorErrorErrorException.new(
          'API does not support the requested content type',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorErrorErrorErrorErrorException.new(
          'The request is formed correctly, but due to some condition the' \
          ' request cannot be processed e.g. email is required and' \
          ' it is not provided in the request',
          _context
        )
      elsif _context.response.status_code == 501
        raise ErrorErrorErrorErrorErrorException.new(
          'The HTTP method being used has not yet been implemented for the' \
          ' requested resource',
          _context
        )
      elsif _context.response.status_code == 503
        raise ErrorErrorErrorErrorErrorException.new(
          'The service requested is currently unavailable',
          _context
        )
      end
      unless _context.response.status_code.between?(200, 208)
        raise ErrorErrorErrorErrorErrorException.new(
          'An internal error occurred when processing the request',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      decoded.map { |element| OutboundPollResponse.from_hash(element) }
    end
  end
end
