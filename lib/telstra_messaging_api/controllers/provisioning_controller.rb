# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module TelstraMessagingApi
  # ProvisioningController
  class ProvisioningController < BaseController
    @instance = ProvisioningController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Delete Subscription
    # @return void response from the API call
    def delete_subscription
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/messages/provisioning/subscriptions'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = @http_client.delete(
        _query_url
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorErrorError62ErrorException.new(
          'Invalid or missing request parameters',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorErrorError62ErrorException.new(
          'Invalid or no credentials passed in the request',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorErrorError62ErrorException.new(
          'Authorization credentials passed and accepted but account does' \
          ' not have permission',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorErrorError62ErrorException.new(
          'The requested URI does not exist',
          _context
        )
      end
      unless _context.response.status_code.between?(200, 208)
        raise ErrorErrorError62ErrorException.new(
          'An internal error occurred when processing the request',
          _context
        )
      end
      validate_response(_context)
    end

    # Create Subscription
    # @param [ProvisionNumberRequest] body Required parameter: A JSON payload
    # containing the required attributes
    # @return ProvisionNumberResponse response from the API call
    def create_subscription(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/messages/provisioning/subscriptions'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorErrorError62ErrorException.new(
          'Invalid or missing request parameters',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorErrorError62ErrorException.new(
          'Invalid or no credentials passed in the request',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorErrorError62ErrorException.new(
          'Authorization credentials passed and accepted but account does' \
          ' not have permission',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorErrorError62ErrorException.new(
          'The requested URI does not exist',
          _context
        )
      end
      unless _context.response.status_code.between?(200, 208)
        raise ErrorErrorError62ErrorException.new(
          'An internal error occurred when processing the request',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ProvisionNumberResponse.from_hash(decoded)
    end

    # Get Subscription
    # @return ProvisionNumberResponse response from the API call
    def get_subscription
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/messages/provisioning/subscriptions'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorErrorError62ErrorException.new(
          'Invalid or missing request parameters',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorErrorError62ErrorException.new(
          'Invalid or no credentials passed in the request',
          _context
        )
      elsif _context.response.status_code == 403
        raise ErrorErrorError62ErrorException.new(
          'Authorization credentials passed and accepted but account does' \
          ' not have permission',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorErrorError62ErrorException.new(
          'The requested URI does not exist',
          _context
        )
      end
      unless _context.response.status_code.between?(200, 208)
        raise ErrorErrorError62ErrorException.new(
          'An internal error occurred when processing the request',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ProvisionNumberResponse.from_hash(decoded)
    end
  end
end
